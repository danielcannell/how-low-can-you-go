[gd_scene load_steps=14 format=2]

[ext_resource path="res://Main.gd" type="Script" id=1]
[ext_resource path="res://Enemies/EnemyManager.gd" type="Script" id=2]
[ext_resource path="res://Enemies/Floater.tscn" type="PackedScene" id=3]
[ext_resource path="res://Enemies/Fish.tscn" type="PackedScene" id=4]
[ext_resource path="res://Enemies/Shark.tscn" type="PackedScene" id=5]
[ext_resource path="res://OutOfBounds.gd" type="Script" id=6]
[ext_resource path="res://Enemies/Jelly.tscn" type="PackedScene" id=7]
[ext_resource path="res://Art/LargeFont.tres" type="DynamicFont" id=8]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 10000, 20 )

[sub_resource type="Shader" id=2]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(0., 1., noise(ray1) + (noise(ray2) * ray2_intensity));
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/angle = -0.2
shader_param/position = 0.0
shader_param/spread = 0.064
shader_param/cutoff = -0.059
shader_param/falloff = 0.81
shader_param/edge_fade = 0.316
shader_param/speed = 9.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 40.0
shader_param/ray2_intensity = 0.3
shader_param/color = Color( 1, 0.988235, 0.286275, 0.8 )
shader_param/hdr = true
shader_param/seed = 7.0

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
noise = SubResource( 4 )

[node name="Main" type="Node"]
script = ExtResource( 1 )

[node name="UICanvas" type="CanvasLayer" parent="."]

[node name="GameOverUI" type="Control" parent="UICanvas"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="GameOverLabel" type="Label" parent="UICanvas/GameOverUI"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -178.5
margin_top = -43.5
margin_right = 178.5
margin_bottom = 43.5
custom_fonts/font = ExtResource( 8 )
text = "Game Over"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Camera2D" type="Camera2D" parent="."]
z_index = -10
current = true

[node name="Background" type="ColorRect" parent="Camera2D"]
margin_left = -9795.15
margin_top = -10180.0
margin_right = 10204.9
margin_bottom = 9819.98
color = Color( 0.501961, 0.552941, 1, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="OutOfBounds" type="Area2D" parent="Camera2D"]
collision_layer = 8
collision_mask = 4
script = ExtResource( 6 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="Camera2D/OutOfBounds"]
position = Vector2( 0, -2000 )
shape = SubResource( 1 )

[node name="CanvasModulate" type="CanvasModulate" parent="Camera2D"]

[node name="EnemyManager" type="Node2D" parent="."]
script = ExtResource( 2 )
Floater = ExtResource( 3 )
Fish = ExtResource( 4 )
Shark = ExtResource( 5 )
Jelly = ExtResource( 7 )

[node name="GUI" type="CanvasLayer" parent="."]

[node name="DepthLabel" type="Label" parent="GUI"]
margin_left = 6.92957
margin_top = 6.71958
margin_right = 83.9296
margin_bottom = 20.7196
text = "Depth: 0 m"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Rays" type="Sprite" parent="."]
material = SubResource( 3 )
position = Vector2( -34.5302, 235.073 )
scale = Vector2( 1.99711, 2.40056 )
texture = SubResource( 5 )

[connection signal="body_entered" from="Camera2D/OutOfBounds" to="Camera2D/OutOfBounds" method="body_entered"]
